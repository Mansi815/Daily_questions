import java.util.Arrays;
import java.util.LinkedList;

public class CardRevealOrder {
    public static int[] deckRevealedIncreasing(int[] deck) {
        // Sort the deck
        Arrays.sort(deck);
        
        // Create a LinkedList to simulate the deck
        LinkedList<Integer> revealedOrder = new LinkedList<>();
        
        // Start the simulation
        for (int i = deck.length - 1; i >= 0; i--) {
            if (!revealedOrder.isEmpty()) {
                // Move the last card to the front if the deck is not empty
                revealedOrder.addFirst(revealedOrder.removeLast());
            }
            // Add the current card to the front of the deck
            revealedOrder.addFirst(deck[i]);
        }
        
        // Convert the LinkedList to an array
        int[] result = new int[deck.length];
        int index = 0;
        for (int card : revealedOrder) {
            result[index++] = card;
        }
        
        return result;
    }

    public static void main(String[] args) {
        int[] deck1 = {17, 13, 11, 2, 3, 5, 7};
        int[] result1 = deckRevealedIncreasing(deck1);
        System.out.println(Arrays.toString(result1)); // Output: [2, 13, 3, 11, 5, 17, 7]

        int[] deck2 = {1, 1000};
        int[] result2 = deckRevealedIncreasing(deck2);
        System.out.println(Arrays.toString(result2)); // Output: [1, 1000]
    }
}
