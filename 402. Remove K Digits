import java.util.Stack;

public class SmallestIntegerAfterRemovingDigits {
    public static String removeKDigits(String num, int k) {
        // Edge case: if k is equal to the length of the number, return "0"
        if (k == num.length()) {
            return "0";
        }

        Stack<Character> stack = new Stack<>();

        // Iterate through each digit in the input number
        for (char digit : num.toCharArray()) {
            // While there is a digit in the stack, and the current digit is smaller than the top of the stack,
            // and there are more removals to perform (k > 0)
            while (!stack.isEmpty() && k > 0 && stack.peek() > digit) {
                // Pop the larger digit from the stack
                stack.pop();
                // Decrease the number of removals remaining
                k--;
            }
            // Push the current digit onto the stack
            stack.push(digit);
        }

        // After iterating through the number, remove any excess digits from the end of the stack if needed
        while (k > 0) {
            stack.pop();
            k--;
        }

        // Build the final result using the stack
        StringBuilder result = new StringBuilder();
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }

        // Since we built the result in reverse order, reverse it
        result.reverse();

        // Remove leading zeros, if any
        while (result.length() > 1 && result.charAt(0) == '0') {
            result.deleteCharAt(0);
        }

        return result.toString();
    }

    public static void main(String[] args) {
        // Test case examples
        String num1 = "1432219";
        int k1 = 3;
        System.out.println(removeKDigits(num1, k1));  // Output: "1219"

        String num2 = "10200";
        int k2 = 1;
        System.out.println(removeKDigits(num2, k2));  // Output: "200"

        String num3 = "10";
        int k3 = 2;
        System.out.println(removeKDigits(num3, k3));  // Output: "0"
    }
}
